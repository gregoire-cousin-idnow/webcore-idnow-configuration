# Curl Examples for Version-First API Endpoints

These examples demonstrate how to interact with the version-first API endpoints using curl. Replace the base URL, token, and other values as needed for your environment.

## Setup Variables

```bash
# Base URL - replace with your actual API Gateway URL
BASE_URL="https://6bz00r29y3.execute-api.eu-west-3.amazonaws.com/api"

# Authentication token - replace with a valid token from your system
TOKEN="your_jwt_token_here"

# Common curl options
COMMON_OPTS="-H \"Content-Type: application/json\" -H \"Authorization: Bearer \$TOKEN\""
```

## Important Note

This API now uses a true version-first approach where:
1. Versions exist independently without any shortnames
2. Shortnames can be added to versions explicitly when needed
3. Configurations are created for specific shortname-version combinations

This is a significant change from the previous approach where creating a version would automatically create a shortname. Now, you must explicitly add shortnames to versions when needed.

## Version Operations

### 1. Get All Versions

```bash
curl -X GET "$BASE_URL/versions" \
  -H "Authorization: Bearer $TOKEN"
```

### 2. Create a New Version

```bash
curl -X POST "$BASE_URL/versions" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "version": "1.0.0",
    "description": "Initial version",
    "isActive": true
  }'
```

### 3. Get a Specific Version

```bash
curl -X GET "$BASE_URL/versions/1.0.0" \
  -H "Authorization: Bearer $TOKEN"
```

### 4. Update a Version

```bash
curl -X PUT "$BASE_URL/versions/1.0.0" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "description": "Updated description",
    "isActive": true
  }'
```

### 5. Delete a Version

```bash
curl -X DELETE "$BASE_URL/versions/1.0.0" \
  -H "Authorization: Bearer $TOKEN"
```

## Shortname Operations

### 1. Get All Shortnames for a Version

```bash
curl -X GET "$BASE_URL/versions/1.0.0/shortnames" \
  -H "Authorization: Bearer $TOKEN"
```

### 2. Add a Shortname to a Version

```bash
curl -X POST "$BASE_URL/versions/1.0.0/shortnames" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "shortname": "my-app",
    "description": "My application shortname"
  }'
```

## Legacy Shortname-First Operations (for reference)

### 1. Get All Versions for a Shortname

```bash
curl -X GET "$BASE_URL/shortnames/my-app/versions" \
  -H "Authorization: Bearer $TOKEN"
```

### 2. Create a Version for a Shortname

```bash
curl -X POST "$BASE_URL/shortnames/my-app/versions" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "version": "1.0.0",
    "description": "Initial version",
    "isActive": true
  }'
```

### 3. Get a Specific Version for a Shortname

```bash
curl -X GET "$BASE_URL/shortnames/my-app/versions/1.0.0" \
  -H "Authorization: Bearer $TOKEN"
```

### 4. Update a Version for a Shortname

```bash
curl -X PUT "$BASE_URL/shortnames/my-app/versions/1.0.0" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "description": "Updated description",
    "isActive": true
  }'
```

### 5. Delete a Version for a Shortname

```bash
curl -X DELETE "$BASE_URL/shortnames/my-app/versions/1.0.0" \
  -H "Authorization: Bearer $TOKEN"
```

## Configuration Operations

### 1. Get All Configurations for a Version-Shortname Combination

```bash
curl -X GET "$BASE_URL/shortnames/my-app/versions/1.0.0/configurations" \
  -H "Authorization: Bearer $TOKEN"
```

### 2. Create a Configuration for a Version-Shortname Combination

```bash
curl -X POST "$BASE_URL/shortnames/my-app/versions/1.0.0/configurations" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "key": "api_url",
    "value": "https://api.example.com",
    "description": "API endpoint URL"
  }'
```

### 3. Get a Specific Configuration

```bash
curl -X GET "$BASE_URL/shortnames/my-app/versions/1.0.0/configurations/config-id" \
  -H "Authorization: Bearer $TOKEN"
```

### 4. Update a Configuration

```bash
curl -X PUT "$BASE_URL/shortnames/my-app/versions/1.0.0/configurations/config-id" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "value": "https://new-api.example.com",
    "description": "Updated API endpoint URL"
  }'
```

### 5. Delete a Configuration

```bash
curl -X DELETE "$BASE_URL/shortnames/my-app/versions/1.0.0/configurations/config-id" \
  -H "Authorization: Bearer $TOKEN"
```

## Authentication Operations

### 1. Register a New User

```bash
curl -X POST "$BASE_URL/register" \
  -H "Content-Type: application/json" \
  -d '{
    "email": "user@example.com",
    "password": "securePassword123!",
    "userType": "user"
  }'
```

### 2. Login

```bash
curl -X POST "$BASE_URL/login" \
  -H "Content-Type: application/json" \
  -d '{
    "email": "user@example.com",
    "password": "securePassword123!"
  }'
```

## Testing Script

Here's a simple script to test the version-first endpoints:

```bash
#!/bin/bash

# Set variables
BASE_URL="https://6bz00r29y3.execute-api.eu-west-3.amazonaws.com/api"
EMAIL="test@example.com"
PASSWORD="Test123!"
VERSION="1.0.0"
SHORTNAME="test-app"

# Login to get token
echo "Logging in..."
TOKEN=$(curl -s -X POST "$BASE_URL/login" \
  -H "Content-Type: application/json" \
  -d "{\"email\":\"$EMAIL\",\"password\":\"$PASSWORD\"}" | grep -o '"token":"[^"]*' | cut -d'"' -f4)

if [ -z "$TOKEN" ]; then
  echo "Login failed. Trying to register..."
  curl -s -X POST "$BASE_URL/register" \
    -H "Content-Type: application/json" \
    -d "{\"email\":\"$EMAIL\",\"password\":\"$PASSWORD\",\"userType\":\"user\"}"
  
  echo "Now logging in..."
  TOKEN=$(curl -s -X POST "$BASE_URL/login" \
    -H "Content-Type: application/json" \
    -d "{\"email\":\"$EMAIL\",\"password\":\"$PASSWORD\"}" | grep -o '"token":"[^"]*' | cut -d'"' -f4)
fi

echo "Token: $TOKEN"

# Step 1: Create a version (without any shortname)
echo -e "\n=== Step 1: Creating a standalone version ==="
echo "Creating version $VERSION..."
curl -s -X POST "$BASE_URL/versions" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d "{\"version\":\"$VERSION\",\"description\":\"Test version\",\"isActive\":true}"

# Get all versions
echo -e "\n=== Step 2: Verify the version was created ==="
echo "Getting all versions..."
curl -s -X GET "$BASE_URL/versions" \
  -H "Authorization: Bearer $TOKEN"

# Get specific version
echo -e "\n=== Step 3: Get the specific version details ==="
echo "Getting version $VERSION..."
curl -s -X GET "$BASE_URL/versions/$VERSION" \
  -H "Authorization: Bearer $TOKEN"

# Add a shortname to the version
echo -e "\n=== Step 4: Add a shortname to the version ==="
echo "Adding shortname $SHORTNAME to version $VERSION..."
curl -s -X POST "$BASE_URL/versions/$VERSION/shortnames" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d "{\"shortname\":\"$SHORTNAME\",\"description\":\"Test shortname\"}"

# Get all shortnames for the version
echo -e "\n=== Step 5: Verify the shortname was added to the version ==="
echo "Getting all shortnames for version $VERSION..."
curl -s -X GET "$BASE_URL/versions/$VERSION/shortnames" \
  -H "Authorization: Bearer $TOKEN"

# Create a configuration for the shortname-version combination
echo -e "\n=== Step 6: Create a configuration for the shortname-version combination ==="
echo "Creating configuration for shortname $SHORTNAME and version $VERSION..."
curl -s -X POST "$BASE_URL/shortnames/$SHORTNAME/versions/$VERSION/configurations" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "key": "api_url",
    "value": "https://api.example.com",
    "description": "API endpoint URL"
  }'

# Get configurations for the shortname-version combination
echo -e "\n=== Step 7: Verify the configuration was created ==="
echo "Getting configurations for shortname $SHORTNAME and version $VERSION..."
curl -s -X GET "$BASE_URL/shortnames/$SHORTNAME/versions/$VERSION/configurations" \
  -H "Authorization: Bearer $TOKEN"

# Update the version
echo -e "\n=== Step 8: Update the version ==="
echo "Updating version $VERSION..."
curl -s -X PUT "$BASE_URL/versions/$VERSION" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d "{\"description\":\"Updated test version\",\"isActive\":true}"

# Delete the version (this will also delete all shortname associations and configurations)
echo -e "\n=== Step 9: Clean up - Delete the version ==="
echo "Deleting version $VERSION..."
curl -s -X DELETE "$BASE_URL/versions/$VERSION" \
  -H "Authorization: Bearer $TOKEN"

echo -e "\n=== Test completed ==="
```

Save this script to a file (e.g., `test-api.sh`), make it executable with `chmod +x test-api.sh`, and run it to test the API endpoints.
